// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_parsian_worldmodel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_parsian_worldmodel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Vector2DProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2DProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovingObjectProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovingObjectProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldModelProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldModelProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameStateProto_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5fparsian_5fworldmodel_2eproto() {
  protobuf_AddDesc_messages_5fparsian_5fworldmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_parsian_worldmodel.proto");
  GOOGLE_CHECK(file != NULL);
  Vector2DProto_descriptor_ = file->message_type(0);
  static const int Vector2DProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2DProto, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2DProto, y_),
  };
  Vector2DProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2DProto_descriptor_,
      Vector2DProto::default_instance_,
      Vector2DProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2DProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2DProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2DProto));
  MovingObjectProto_descriptor_ = file->message_type(1);
  static const int MovingObjectProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, angulevelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, direction_),
  };
  MovingObjectProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MovingObjectProto_descriptor_,
      MovingObjectProto::default_instance_,
      MovingObjectProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObjectProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MovingObjectProto));
  WorldModelProto_descriptor_ = file->message_type(2);
  static const int WorldModelProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, our_robots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, opp_robots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, gamestate_),
  };
  WorldModelProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldModelProto_descriptor_,
      WorldModelProto::default_instance_,
      WorldModelProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldModelProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldModelProto));
  GameStateProto_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5fparsian_5fworldmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2DProto_descriptor_, &Vector2DProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MovingObjectProto_descriptor_, &MovingObjectProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldModelProto_descriptor_, &WorldModelProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5fparsian_5fworldmodel_2eproto() {
  delete Vector2DProto::default_instance_;
  delete Vector2DProto_reflection_;
  delete MovingObjectProto::default_instance_;
  delete MovingObjectProto_reflection_;
  delete WorldModelProto::default_instance_;
  delete WorldModelProto_reflection_;
}

void protobuf_AddDesc_messages_5fparsian_5fworldmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!messages_parsian_worldmodel.proto\"%\n\rV"
    "ector2DProto\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\241\001\n\021M"
    "ovingObjectProto\022\n\n\002id\030\001 \002(\r\022\033\n\003pos\030\002 \002("
    "\0132\016.Vector2DProto\022\033\n\003vel\030\003 \002(\0132\016.Vector2"
    "DProto\022\033\n\003acc\030\004 \002(\0132\016.Vector2DProto\022\026\n\016a"
    "nguleVelocity\030\005 \002(\002\022\021\n\tdirection\030\006 \002(\002\"\303"
    "\001\n\017WorldModelProto\022 \n\004ball\030\001 \002(\0132\022.Movin"
    "gObjectProto\022&\n\nour_robots\030\002 \003(\0132\022.Movin"
    "gObjectProto\022&\n\nopp_robots\030\003 \003(\0132\022.Movin"
    "gObjectProto\022\014\n\004blue\030\004 \002(\010\022\014\n\004mode\030\005 \002(\t"
    "\022\"\n\tgameState\030\006 \002(\0162\017.GameStateProto*\236\002\n"
    "\016GameStateProto\022\n\n\006PlayOn\020\000\022\024\n\020FreeBall_"
    "LeftTop\020\001\022\024\n\020FreeBall_LeftBot\020\002\022\025\n\021FreeB"
    "all_RightTop\020\003\022\025\n\021FreeBall_RightBot\020\004\022\024\n"
    "\020PlaceKick_Yellow\020\005\022\022\n\016PlaceKick_Blue\020\006\022"
    "\026\n\022PenaltyKick_Yellow\020\007\022\024\n\020PenaltyKick_B"
    "lue\020\010\022\023\n\017FreeKick_Yellow\020\t\022\021\n\rFreeKick_B"
    "lue\020\n\022\023\n\017GoalKick_Yellow\020\013\022\021\n\rGoalKick_B"
    "lue\020\014", 725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_parsian_worldmodel.proto", &protobuf_RegisterTypes);
  Vector2DProto::default_instance_ = new Vector2DProto();
  MovingObjectProto::default_instance_ = new MovingObjectProto();
  WorldModelProto::default_instance_ = new WorldModelProto();
  Vector2DProto::default_instance_->InitAsDefaultInstance();
  MovingObjectProto::default_instance_->InitAsDefaultInstance();
  WorldModelProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5fparsian_5fworldmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5fparsian_5fworldmodel_2eproto {
  StaticDescriptorInitializer_messages_5fparsian_5fworldmodel_2eproto() {
    protobuf_AddDesc_messages_5fparsian_5fworldmodel_2eproto();
  }
} static_descriptor_initializer_messages_5fparsian_5fworldmodel_2eproto_;
const ::google::protobuf::EnumDescriptor* GameStateProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStateProto_descriptor_;
}
bool GameStateProto_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2DProto::kXFieldNumber;
const int Vector2DProto::kYFieldNumber;
#endif  // !_MSC_VER

Vector2DProto::Vector2DProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector2DProto)
}

void Vector2DProto::InitAsDefaultInstance() {
}

Vector2DProto::Vector2DProto(const Vector2DProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vector2DProto)
}

void Vector2DProto::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2DProto::~Vector2DProto() {
  // @@protoc_insertion_point(destructor:Vector2DProto)
  SharedDtor();
}

void Vector2DProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2DProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2DProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2DProto_descriptor_;
}

const Vector2DProto& Vector2DProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fparsian_5fworldmodel_2eproto();
  return *default_instance_;
}

Vector2DProto* Vector2DProto::default_instance_ = NULL;

Vector2DProto* Vector2DProto::New() const {
  return new Vector2DProto;
}

void Vector2DProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector2DProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2DProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector2DProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector2DProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector2DProto)
  return false;
#undef DO_
}

void Vector2DProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector2DProto)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector2DProto)
}

::google::protobuf::uint8* Vector2DProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector2DProto)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector2DProto)
  return target;
}

int Vector2DProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2DProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2DProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2DProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2DProto::MergeFrom(const Vector2DProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2DProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2DProto::CopyFrom(const Vector2DProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2DProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Vector2DProto::Swap(Vector2DProto* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2DProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2DProto_descriptor_;
  metadata.reflection = Vector2DProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MovingObjectProto::kIdFieldNumber;
const int MovingObjectProto::kPosFieldNumber;
const int MovingObjectProto::kVelFieldNumber;
const int MovingObjectProto::kAccFieldNumber;
const int MovingObjectProto::kAnguleVelocityFieldNumber;
const int MovingObjectProto::kDirectionFieldNumber;
#endif  // !_MSC_VER

MovingObjectProto::MovingObjectProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MovingObjectProto)
}

void MovingObjectProto::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector2DProto*>(&::Vector2DProto::default_instance());
  vel_ = const_cast< ::Vector2DProto*>(&::Vector2DProto::default_instance());
  acc_ = const_cast< ::Vector2DProto*>(&::Vector2DProto::default_instance());
}

MovingObjectProto::MovingObjectProto(const MovingObjectProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MovingObjectProto)
}

void MovingObjectProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  vel_ = NULL;
  acc_ = NULL;
  angulevelocity_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovingObjectProto::~MovingObjectProto() {
  // @@protoc_insertion_point(destructor:MovingObjectProto)
  SharedDtor();
}

void MovingObjectProto::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete vel_;
    delete acc_;
  }
}

void MovingObjectProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObjectProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObjectProto_descriptor_;
}

const MovingObjectProto& MovingObjectProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fparsian_5fworldmodel_2eproto();
  return *default_instance_;
}

MovingObjectProto* MovingObjectProto::default_instance_ = NULL;

MovingObjectProto* MovingObjectProto::New() const {
  return new MovingObjectProto;
}

void MovingObjectProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MovingObjectProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, angulevelocity_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector2DProto::Clear();
    }
    if (has_vel()) {
      if (vel_ != NULL) vel_->::Vector2DProto::Clear();
    }
    if (has_acc()) {
      if (acc_ != NULL) acc_->::Vector2DProto::Clear();
    }
    direction_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MovingObjectProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MovingObjectProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .Vector2DProto pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vel;
        break;
      }

      // required .Vector2DProto vel = 3;
      case 3: {
        if (tag == 26) {
         parse_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_acc;
        break;
      }

      // required .Vector2DProto acc = 4;
      case 4: {
        if (tag == 34) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_anguleVelocity;
        break;
      }

      // required float anguleVelocity = 5;
      case 5: {
        if (tag == 45) {
         parse_anguleVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angulevelocity_)));
          set_has_angulevelocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_direction;
        break;
      }

      // required float direction = 6;
      case 6: {
        if (tag == 53) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MovingObjectProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MovingObjectProto)
  return false;
#undef DO_
}

void MovingObjectProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MovingObjectProto)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .Vector2DProto pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // required .Vector2DProto vel = 3;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vel(), output);
  }

  // required .Vector2DProto acc = 4;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acc(), output);
  }

  // required float anguleVelocity = 5;
  if (has_angulevelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angulevelocity(), output);
  }

  // required float direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MovingObjectProto)
}

::google::protobuf::uint8* MovingObjectProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MovingObjectProto)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .Vector2DProto pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // required .Vector2DProto vel = 3;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vel(), target);
  }

  // required .Vector2DProto acc = 4;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->acc(), target);
  }

  // required float anguleVelocity = 5;
  if (has_angulevelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angulevelocity(), target);
  }

  // required float direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MovingObjectProto)
  return target;
}

int MovingObjectProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .Vector2DProto pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required .Vector2DProto vel = 3;
    if (has_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vel());
    }

    // required .Vector2DProto acc = 4;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

    // required float anguleVelocity = 5;
    if (has_angulevelocity()) {
      total_size += 1 + 4;
    }

    // required float direction = 6;
    if (has_direction()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObjectProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MovingObjectProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MovingObjectProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MovingObjectProto::MergeFrom(const MovingObjectProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector2DProto::MergeFrom(from.pos());
    }
    if (from.has_vel()) {
      mutable_vel()->::Vector2DProto::MergeFrom(from.vel());
    }
    if (from.has_acc()) {
      mutable_acc()->::Vector2DProto::MergeFrom(from.acc());
    }
    if (from.has_angulevelocity()) {
      set_angulevelocity(from.angulevelocity());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MovingObjectProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObjectProto::CopyFrom(const MovingObjectProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObjectProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel().IsInitialized()) return false;
  }
  if (has_acc()) {
    if (!this->acc().IsInitialized()) return false;
  }
  return true;
}

void MovingObjectProto::Swap(MovingObjectProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(vel_, other->vel_);
    std::swap(acc_, other->acc_);
    std::swap(angulevelocity_, other->angulevelocity_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MovingObjectProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovingObjectProto_descriptor_;
  metadata.reflection = MovingObjectProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldModelProto::kBallFieldNumber;
const int WorldModelProto::kOurRobotsFieldNumber;
const int WorldModelProto::kOppRobotsFieldNumber;
const int WorldModelProto::kBlueFieldNumber;
const int WorldModelProto::kModeFieldNumber;
const int WorldModelProto::kGameStateFieldNumber;
#endif  // !_MSC_VER

WorldModelProto::WorldModelProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldModelProto)
}

void WorldModelProto::InitAsDefaultInstance() {
  ball_ = const_cast< ::MovingObjectProto*>(&::MovingObjectProto::default_instance());
}

WorldModelProto::WorldModelProto(const WorldModelProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldModelProto)
}

void WorldModelProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ball_ = NULL;
  blue_ = false;
  mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldModelProto::~WorldModelProto() {
  // @@protoc_insertion_point(destructor:WorldModelProto)
  SharedDtor();
}

void WorldModelProto::SharedDtor() {
  if (mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mode_;
  }
  if (this != default_instance_) {
    delete ball_;
  }
}

void WorldModelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldModelProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldModelProto_descriptor_;
}

const WorldModelProto& WorldModelProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fparsian_5fworldmodel_2eproto();
  return *default_instance_;
}

WorldModelProto* WorldModelProto::default_instance_ = NULL;

WorldModelProto* WorldModelProto::New() const {
  return new WorldModelProto;
}

void WorldModelProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldModelProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 57) {
    ZR_(blue_, gamestate_);
    if (has_ball()) {
      if (ball_ != NULL) ball_->::MovingObjectProto::Clear();
    }
    if (has_mode()) {
      if (mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mode_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  our_robots_.Clear();
  opp_robots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldModelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldModelProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MovingObjectProto ball = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_our_robots;
        break;
      }

      // repeated .MovingObjectProto our_robots = 2;
      case 2: {
        if (tag == 18) {
         parse_our_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_our_robots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_our_robots;
        if (input->ExpectTag(26)) goto parse_opp_robots;
        break;
      }

      // repeated .MovingObjectProto opp_robots = 3;
      case 3: {
        if (tag == 26) {
         parse_opp_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opp_robots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_opp_robots;
        if (input->ExpectTag(32)) goto parse_blue;
        break;
      }

      // required bool blue = 4;
      case 4: {
        if (tag == 32) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mode;
        break;
      }

      // required string mode = 5;
      case 5: {
        if (tag == 42) {
         parse_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gameState;
        break;
      }

      // required .GameStateProto gameState = 6;
      case 6: {
        if (tag == 48) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameStateProto_IsValid(value)) {
            set_gamestate(static_cast< ::GameStateProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldModelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldModelProto)
  return false;
#undef DO_
}

void WorldModelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldModelProto)
  // required .MovingObjectProto ball = 1;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball(), output);
  }

  // repeated .MovingObjectProto our_robots = 2;
  for (int i = 0; i < this->our_robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->our_robots(i), output);
  }

  // repeated .MovingObjectProto opp_robots = 3;
  for (int i = 0; i < this->opp_robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->opp_robots(i), output);
  }

  // required bool blue = 4;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blue(), output);
  }

  // required string mode = 5;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mode(), output);
  }

  // required .GameStateProto gameState = 6;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gamestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldModelProto)
}

::google::protobuf::uint8* WorldModelProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldModelProto)
  // required .MovingObjectProto ball = 1;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball(), target);
  }

  // repeated .MovingObjectProto our_robots = 2;
  for (int i = 0; i < this->our_robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->our_robots(i), target);
  }

  // repeated .MovingObjectProto opp_robots = 3;
  for (int i = 0; i < this->opp_robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->opp_robots(i), target);
  }

  // required bool blue = 4;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blue(), target);
  }

  // required string mode = 5;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mode(), target);
  }

  // required .GameStateProto gameState = 6;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gamestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldModelProto)
  return target;
}

int WorldModelProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MovingObjectProto ball = 1;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // required bool blue = 4;
    if (has_blue()) {
      total_size += 1 + 1;
    }

    // required string mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

    // required .GameStateProto gameState = 6;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }

  }
  // repeated .MovingObjectProto our_robots = 2;
  total_size += 1 * this->our_robots_size();
  for (int i = 0; i < this->our_robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->our_robots(i));
  }

  // repeated .MovingObjectProto opp_robots = 3;
  total_size += 1 * this->opp_robots_size();
  for (int i = 0; i < this->opp_robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opp_robots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldModelProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldModelProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldModelProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldModelProto::MergeFrom(const WorldModelProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  our_robots_.MergeFrom(from.our_robots_);
  opp_robots_.MergeFrom(from.opp_robots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ball()) {
      mutable_ball()->::MovingObjectProto::MergeFrom(from.ball());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldModelProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldModelProto::CopyFrom(const WorldModelProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldModelProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->our_robots())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->opp_robots())) return false;
  return true;
}

void WorldModelProto::Swap(WorldModelProto* other) {
  if (other != this) {
    std::swap(ball_, other->ball_);
    our_robots_.Swap(&other->our_robots_);
    opp_robots_.Swap(&other->opp_robots_);
    std::swap(blue_, other->blue_);
    std::swap(mode_, other->mode_);
    std::swap(gamestate_, other->gamestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldModelProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldModelProto_descriptor_;
  metadata.reflection = WorldModelProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
